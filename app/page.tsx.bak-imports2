'use client';
import { exportReceiptPDF } from './_utils/receipt';
import { exportReceiptPDF } from './_utils/receipt'
import { exportReceiptPDF } from './_utils/receipt'
import { exportReceiptPDF } from './_utils/receipt'
import { exportReceiptPDF } from './_utils/receipt'
function parseMoney(v: number | string): number {
  if (typeof v === 'number') return v
  if (typeof v !== 'string') return 0
  const n = v
    .replace(/[^\d.,-]/g,'')               // deja solo dígitos, coma, punto y signo
    .replace(/\.(?=\d{3}(?:\D|$))/g,'')    // quita puntos de miles estilo 1.234.567
    .replace(',', '.');                    // coma decimal -> punto
  const f = parseFloat(n)
  return Number.isFinite(f) ? f : 0
}
export default function POS() {
  const [stores, setStores] = useState<Store[]>([])
  const [storeId, setStoreId] = useState<string | null>(null)
  const [storesErr, setStoresErr] = useState('')

  const [code, setCode] = useState('')
  const [items, setItems] = useState<Item[]>([])
const [payMethod, setPayMethod] = useState<PaymentMethod>('efectivo')
const [amountGiven, setAmountGiven] = useState<number | ''>('')
const confirmSaleWithPayment = async () => {
  try {
    if (!items.length) { toast.error('No hay items en el ticket'); return }
    if (!storeId) { toast.error('Elegí una sucursal'); return }

    // Validación efectivo
    if (payMethod === 'efectivo') {
      if (amountGiven === '' || Number(amountGiven) < total) {
        toast.error('Monto insuficiente para efectivo')
        return
      }
    }

    // 1) Crear venta
    const { data: saleRow, error: eSale } = await supabase
      .from('sales')
      .insert({ store_id: storeId, total: Number(total) })
      .select('id')
      .single()
    if (eSale) throw eSale
    const saleId = saleRow.id

    // 2) Items
    const itemsPayload = items.map(it => ({
      sale_id: saleId,
      product_id: it.id,
      qty: it.qty,
      price: it.price,
      subtotal: it.subtotal,
    }))
    const { error: eItems } = await supabase.from('sale_items').insert(itemsPayload)
    if (eItems) throw eItems

    // 3) Pago
    const amount = (payMethod === 'efectivo') ? parseMoney(amountGiven) : Number(total)
    const changeValue = (payMethod === 'efectivo') ? Math.max(0, amount - Number(total)) : 0
    const { error: ePay } = await supabase.from('payments').insert({
      sale_id: saleId,
      method: payMethod,
      amount,
      change: changeValue,
    })
    if (ePay) throw ePay

    // 4) OK: limpiar
    toast.success('Venta confirmada')
    setItems([])              // si tenés clearTicket(), podés usarla en su lugar
    setAmountGiven('')
    setPayMethod('efectivo')
  } catch (err) {
    console.error(err)
    toast.error('No se pudo confirmar la venta: ' + (err?.message || JSON.stringify(err)))
  }
}
  const [suggestions, setSuggestions] = useState<Product[]>([])
  const [openSug, setOpenSug] = useState(false)
  const [activeIndex, setActiveIndex] = useState(-1)

  const inputRef = useRef<HTMLInputElement>(null)
  const timer = useRef<ReturnType<typeof setTimeout> | null>(null)

  useEffect(() => {
    const i = setInterval(() => {}, 3000)
    return () => clearInterval(i)
  }, [])

  useEffect(() => {
    ;(async () => {
      const { data, error } = await supabase.from('stores').select('id,name').order('name')
      if (error) { setStoresErr(error.message); setStores([]); return }
      setStores(data || [])
      if (!storeId && data && data.length) setStoreId(data[0].id)
    })()
  }, [storeId])

  const addItem = (p: Product) => {
    if (p.stock <= 0) { alert(`Sin stock: ${p.name}`); return }
    setItems(prev => {
      const idx = prev.findIndex(x => x.id === p.id)
      if (idx >= 0) {
        const copy = [...prev]
        const it = { ...copy[idx] }
        if (it.qty + 1 > p.stock) { alert('No hay más stock en esta sucursal'); return prev }
        it.qty += 1
        it.subtotal = it.qty * it.price
        copy[idx] = it
        return copy
      }
      return [...prev, { ...p, qty: 1, subtotal: p.price }]
    })
    setCode(''); setSuggestions([]); setOpenSug(false); setActiveIndex(-1)
  }

  // Buscar 1 producto por SKU exacto o por nombre (contiene) EN LA SUCURSAL
  const addByQuery = async (raw: string) => {
    const q = raw.trim()
    if (!q) return
    if (!storeId) return alert('Elegí una sucursal primero')

    // Usamos la vista plana y OR con comodines '*'
    const { data, error } = await supabase
      .from('v_store_products')
      .select('id:product_id, sku, name, price, stock')
      .eq('store_id', storeId)
      .or(`sku.eq.${q},name.ilike.*${q}*`)   // <- usa '*' en lugar de '%'
      .order('name', { ascending: true })
      .limit(1)
      .maybeSingle()

    if (error) return alert('Error: ' + error.message)
    if (!data) return alert('No existe en esta sucursal: ' + q)
    addItem({
      id: data.id, sku: data.sku, name: data.name,
      price: Number(data.price), stock: Number(data.stock)
    })
  }

  // Sugerencias para autocompletar (por sucursal)
  const searchSuggestions = async (term: string) => {
    const t = term.trim()
    if (!t || !storeId) { setSuggestions([]); setOpenSug(false); return }
    const { data, error } = await supabase
      .from('v_store_products')
      .select('id:product_id, sku, name, price, stock')
      .eq('store_id', storeId)
      .or(`sku.ilike.*${t}*,name.ilike.*${t}*`)  // <- comodín '*'
      .order('name', { ascending: true })
      .limit(8)
    if (error) return
    const list = (data || []).map((r: any) => ({
      id: r.id, sku: r.sku, name: r.name, price: Number(r.price), stock: Number(r.stock)
    })) as Product[]
    setSuggestions(list)
    setOpenSug(list.length > 0)
    setActiveIndex(-1)
  }

  const onChange = (v: string) => {
    setCode(v)
    if (timer.current) clearTimeout(timer.current)
    timer.current = setTimeout(() => searchSuggestions(v), 200)
  }

  const onKeyDown = async (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (!openSug) { if (e.key === 'Enter') await addByQuery(code); return }
    if (e.key === 'ArrowDown') { e.preventDefault(); setActiveIndex(i => Math.min(i + 1, suggestions.length - 1)) }
    else if (e.key === 'ArrowUp') { e.preventDefault(); setActiveIndex(i => Math.max(i - 1, 0)) }
    else if (e.key === 'Enter') { e.preventDefault(); if (activeIndex >= 0 && suggestions[activeIndex]) addItem(suggestions[activeIndex]); else await addByQuery(code) }
    else if (e.key === 'Escape') { setOpenSug(false); setActiveIndex(-1) }
  }

  const total = items.reduce((a, b) => a + b.subtotal, 0)
const change = payMethod === 'efectivo' ? Math.max(0, parseMoney(amountGiven) - total) : 0
    ? Math.max(0, Number(amountGiven) - total)
    : 0

const confirmDisabled =
  !items.length || !storeId ||
  (payMethod === 'efectivo' && (amountGiven === '' || Number(amountGiven) < total))

  const confirmSale = async () => {
    if (!items.length) return
    if (!storeId) return alert('Elegí una sucursal antes de confirmar la venta.')

    const { data: sale, error: e1 } = await supabase
      .from('sales')
      .insert({ store_id: storeId })
      .select('id')
      .single()
    if (e1) return alert('Error creando venta: ' + e1.message)

    const payload = items.map(it => ({
      sale_id: sale!.id,
      product_id: it.id,
      qty: it.qty,
      unit_price: it.price,
      subtotal: it.subtotal,
    }))
    const { error: e2 } = await supabase.from('sale_items').insert(payload)
    if (e2) return alert('Error guardando ítems: ' + e2.message)

    alert('Venta OK  |  Total $' + total.toFixed(2))
    setItems([])
  }

  const clearTicket = () => setItems([])

  return (
    <main className="p-6 max-w-3xl mx-auto space-y-4 relative">
      <h1 className="text-2xl font-bold">POS  |  Super Juampy</h1>

      <div className="mb-2">
        <label className="block mb-1 font-medium">Sucursal</label>
        {storesErr && <div className="mb-2 text-sm text-red-600">Error: {storesErr}</div>}
        {stores.length === 0 ? (
          <div className="text-sm opacity-70">No hay sucursales.</div>
        ) : (
          <select value={storeId || ''} onChange={e=>setStoreId(e.target.value)} className="border rounded-xl p-2">
            {stores.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
          </select>
        )}
      </div>

      <div className="relative">
        <input
          ref={inputRef}
          value={code}
          onChange={(e) => onChange(e.target.value)}
          onKeyDown={onKeyDown}
          placeholder="Escaneá o escribí código o nombre"
          className="w-full border rounded-xl p-3 focus:outline-none"
        />
        {openSug && suggestions.length > 0 && (
          <div className="absolute left-0 right-0 z-30 mt-2 bg-white text-[#111] border rounded-xl shadow-lg max-h-64 overflow-auto">
            {suggestions.map((p, i) => {
              const disabled = p.stock <= 0
              return (
                <button
                  key={p.id}
                  onClick={() => !disabled && addItem(p)}
                  disabled={disabled}
                  className={`w-full text-left px-3 py-2 hover:bg-black/5 ${i === activeIndex ? 'bg-white/10' : ''} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  <div className="font-medium">{p.name}</div>
                  <div className="opacity-70">
                    SKU {p.sku}  |  <span className={disabled ? 'line-through' : ''}>${p.price.toFixed(2)}</span>  |  Stock: {p.stock}
                  </div>
                </button>
              )
            })}
          </div>
        )}
      </div>

      <div className="border rounded-2xl p-4">
        <table className="table">
          <thead><tr className="text-left border-b"><th>Producto</th><th>SKU</th><th>Cant.</th><th>Precio</th><th>Subt.</th></tr></thead>
          <tbody>
            {items.map(it => (
              <tr key={it.id} className="border-b">
                <td>{it.name}</td><td>{it.sku}</td><td>{it.qty}</td><td>${it.price.toFixed(2)}</td><td>${it.subtotal.toFixed(2)}</td>
              </tr>
            ))}
          </tbody>
          <tfoot><tr><td colSpan={4} className="text-right font-bold">TOTAL</td><td className="font-bold">${total.toFixed(2)}</td></tr></tfoot>
        </table>
      </div>

      {/* Pago */}
<div className="mt-3 grid grid-cols-1 md:grid-cols-3 gap-3">
  <div>
    <label className="block text-sm mb-1">Método de pago</label>
    <select
      value={payMethod}
      onChange={(e) => setPayMethod(e.target.value as PaymentMethod)}
      className="w-full border rounded-xl p-2"
    >
      <option value="efectivo">Efectivo</option>
      <option value="tarjeta">Tarjeta</option>
      <option value="transferencia">Transferencia</option>
    </select>
  </div>

  <div>
    <label htmlFor="amountGiven" className="block text-sm mb-1">Monto recibido</label>
    <input
      type="number"
      inputMode="decimal"
      className="w-full border rounded-xl p-2"
      placeholder={payMethod === 'efectivo' ? 'Ej: 5000' : 'Se autocompleta'}
      value={amountGiven}
      onChange={(e) => setAmountGiven(e.target.value === '' ? '' : Number(e.target.value))}
      disabled={payMethod !== 'efectivo'}
    />
  </div>

  <div className="flex items-end">
    <div className="border rounded-xl p-3 w-full">
      <div className="text-sm opacity-70">Vuelto</div>
      <div className="text-2xl font-semibold">${change.toFixed(2)}</div>
    </div>
  </div>
</div>
<div className="flex gap-2">
  <button
    onClick={() => addByQuery(code)}
    className="px-4 py-2 rounded-xl border"
  >
    Agregar
  </button>

  <button
    onClick={confirmSaleWithPayment}
    className="px-4 py-2 rounded-xl btn-primary border-none"
    disabled={confirmDisabled}
  >
    Confirmar venta
  </button>

  <button
    onClick={clearTicket}
    className="px-4 py-2 rounded-xl border"
    disabled={!items.length}
  >
    Limpiar ticket
  </button>

  <button
    onClick={() => {
      const storeName = (stores?.find?.(s => s.id === storeId)?.name) || 'Sucursal'
      const amt = payMethod === 'efectivo' ? parseMoney(amountGiven) : Number(total)
      exportReceiptPDF({ storeName, items, payMethod, amount: amt, change, total: Number(total) })
    }}
    disabled={!items.length || !storeId}
    className="px-3 py-2 rounded-xl border"
  >
    Imprimir ticket
  </button>
</div>
    </main>
  )
}











